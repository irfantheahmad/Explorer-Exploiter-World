from Tkinter import *
import os
import Image
import ImageTk
import tkMessageBox
import tkSimpleDialog
import numpy as np
import matplotlib.pyplot as plt
import random
import time
import math
from statistics import mean,stdev


root=Tk()


#create world

#w=int(input("width of world :"))
#w=10
#h=int(input("length of world :"))
#h=10

x_str = tkSimpleDialog.askstring('Size', 'Enter grid size')
if x_str == None:
        tkMessageBox.showwarning('Error', 'No size found!')
        quit()
w =h = int(x_str)
(x,y)=(w,h)
wid=(w*h)
if wid < 80:
        wid=70
else:
        wid=30
W = np.zeros((w,h))
W=W.astype(int)


#_________________________________________________
#root.geometry("500x500+100+100")

root.wm_title("My World")

board = Canvas(root, width=x*wid, height=y*wid)

for i in range(x):
        for j in range(y):
            board.create_rectangle(i*wid, j*wid, (i+1)*wid, (j+1)*wid, fill="white", width=1)
            #board.create_oval(i, j, i+0.8*w, j+0.8*w, outline="red", fill="red", width=1)

#board.pack(side=LEFT)

grid = [[0 for row in range(x)] for col in range(y)]
item_grid = [[0 for row in grid[0]] for col in grid]

path = os.getcwd() + "/images/"
#ev= ImageTk.PhotoImage(file=path+'explorer.png')
ev=Image.open(path+'explorer.png')
image2=ev.resize((wid/2,wid/2),Image.ANTIALIAS)
expr_pic=ImageTk.PhotoImage(image2)
#expr_pic=ev.subsample(2,2)
#expt_pic = ImageTk.PhotoImage(file=path+'exploiter.png')
ep=Image.open(path+'exploiter.png')
image3=ep.resize((wid/2,wid/2),Image.ANTIALIAS)
expt_pic=ImageTk.PhotoImage(image3)



#_____________________________________________________________________________


        

#count: sparse = 2 & dense = 1 & agents explr=1 & explt=1
#type: 0 = unoccupied, 1 = sparse source, & 2 = dense source, 3 = explorer agent
#      4 = exploiter agent

t=[i for i in np.ndindex(4,4)]
z=[i for i in np.ndindex(w,h) ]#if i not in t]
init=z


#arrange world

#ns=int(input("no. of sparses: "))
#ns=5
ns=int(tkSimpleDialog.askstring('Sparse source', 'Enter no. of sparse source'))
j=0
while j <ns:
        m=random.choice([i for i in np.ndindex(w,h) if i not in t])
        #init.remove(m)
        #print(j,m,W[m])
        if W[m]==0:
                W[m[0]][m[1]] = 1
                j = j+1
                
#nd=int(input("no. of denses: "))
#nd=2
nd=int(tkSimpleDialog.askstring('Dense source', 'Enter no. of dense source'))
j=0
while j <nd:
        m=random.choice([i for i in np.ndindex(w,h) if i not in t])
        #init.remove(m)
        if W[m]==0:
                W[m[0]][m[1]] = 2
                j = j+1
                
#aer=int(input("no. of explorer: "))
#aer=2
aer=int(tkSimpleDialog.askstring('Exploiter Agents', 'Enter no. of explorers'))
j=0
while j <aer:
        m=random.choice(t)
        t.remove(m)
        W[m[0]][m[1]] = 3
        j = j+1
        
#aet=int(input("no. of exploiter: "))
#aet=2
aet=int(tkSimpleDialog.askstring('Exploiter Agents', 'Enter no. of exploiters'))
j=0
while j <aet:
        m=random.choice(t)
        t.remove(m)
        W[m[0]][m[1]] = 4
        j = j+1      

#####################################################


class Sources:
        instances=[]
        def __init__(self,name,location,EU, kind):
                #print(location)
                self.__class__.instances.append(self)
                self.n = name
                self.l = location
                self.e = EU
                self.k = kind
                if kind=="sparse":
                        self.c=board.create_rectangle(location[1]*wid, location[0]*wid, (location[1]+1)*wid, (location[0]+1)*wid, fill="grey", outline="", width=1)
                else:
                        self.c=board.create_rectangle(location[1]*wid, location[0]*wid, (location[1]+1)*wid, (location[0]+1)*wid, fill="red", outline="", width=1)

                        

		
esl=np.where(W==1)
es=0
for es in range(0,ns):
        #print(str(es))
        Sources("es"+str(es),(esl[0][es],esl[1][es]),20,"sparse")
        
edl=np.where(W==2)
ed=0
for ed in range(0, nd):
        Sources("ed"+str(ed),(edl[0][ed],edl[1][ed]),50,"dense")


###########################################################
instances=[]
class Agents:

        def __init__(self,name, location,kind,society):
                self.n = name
                self.l = location
                self.e = 50 #EU
                self.k = kind
                self.a = 0 #age
                self.m = [] #memory
                self.s = society
                self.time = 0 #ticks
                self.srno=id(self)
                self.pl= 0
                if kind=="expr":
                        self.c=board.create_image(location[1]*wid +wid/2, location[0]*wid + wid/2, image=expr_pic)
                        #self.c=board.create_oval(location[1]*wid, location[0]*wid, (location[1]+1)*wid, (location[0]+1)*wid, outline="",fill="green", width=0.1)
                else:
                        self.c=board.create_image(location[1]*wid +wid/2, location[0]*wid + wid/2, image=expt_pic)
                        #self.c=board.create_oval(location[1]*wid, location[0]*wid, (location[1]+1)*wid, (location[0]+1)*wid, outline="",fill="orange", width=0.1)


aexpr_l=np.where(W==3)
aexr=0
for aexr in range(0,aer):
        Aaexr=Agents("exr"+str(aexr),(aexpr_l[0][aexr],aexpr_l[1][aexr]),"expr",1)
        instances.append(Aaexr)
        #board.create_oval(Aaexr.l[1]*wid, Aaexr.l[0]*wid, (Aaexr.l[1]+1)*wid, (Aaexr.l[0]+1)*wid, outline="",fill="green", width=0.1)
     
aexpt_l=np.where(W==4)
aext=0
for aext in range(0, aet):
        Aaext=Agents("ext"+str(aext),(aexpt_l[0][aext],aexpt_l[1][aext]),"expt",1)
        instances.append(Aaext)
        #board.create_oval(Aaext.l[1]*wid, Aaext.l[0]*wid, (Aaext.l[1]+1)*wid, (Aaext.l[0]+1)*wid, outline="",fill="orange", width=0.1)

print(W)
#################################################################

#######FUNCTIONS############

#locations to move random

def position_mov_sen(n,d):
        p=[]
        for i in z:
                t=math.sqrt((i[0] - n.l[0])**2 + (i[1] - n.l[1])**2)
                #print("tot",(int(str(int(W[i])))))
                if t<=d and (int(str(int(W[i]))) ==1 or int(str(int(W[i]))) ==2):
                        p.append(i)
        return p

def position_mov_ran(n,d):
        #print(z)
        p=[]
        for i in z:
                t=math.sqrt((i[0] - n.l[0])**2 + (i[1] - n.l[1])**2)
                if t<=d: 
                        p.append(i)
        return p


def random_move(A,nl):
        #print("RRR")
        j=0
        if W[nl]==0:
                board.delete(A.c)
                A.pl=A.l
                pv=W[A.l]
                W[A.l]=pv//10
                A.l=nl
                W[A.l]=(W[nl]*10)+pv%10
                if A.k=="expr":
                        A.c=board.create_image(A.l[1]*wid +wid/2, A.l[0]*wid + wid/2, image=expr_pic)
                else:
                        A.c=board.create_image(A.l[1]*wid +wid/2, A.l[0]*wid + wid/2, image=expt_pic)
                j=1
                return j

# sensing move

def sense_move(A,nl):
        #print("SSS")
        m=0
        #v=str(int(W[nl]))
        board.delete(A.c)
        A.pl=A.l
        pv=W[A.l]
        W[A.l]=pv//10
        A.l=nl
        W[A.l]=(W[nl]*10)+pv%10
        if A.k=="expr":
                A.c=board.create_image(A.l[1]*wid +wid/2, A.l[0]*wid + wid/2, image=expr_pic)
        else:
                A.c=board.create_image(A.l[1]*wid +wid/2, A.l[0]*wid + wid/2, image=expt_pic)
        m=1        
        return m

#mine energy

def mine_expr(A):
        for source in Sources.instances:
                if A.l == source.l and source.k=="dense":
                        #mine=mine+1
                        A.e=A.e+(source.e/20)
                        source.e=source.e-(source.e/20)
                        A.m.append((source.l,source.k))
                elif A.l==source.l and source.k=="sparse":
                        #mine=mine+1
                        A.e=A.e+(source.e/4)
                        source.e=source.e-(source.e/4)
                        A.m.append((source.l,source.k))

def mine_expt(A):
        for source in Sources.instances:
                if A.l == source.l and source.k=="dense":
                        A.e=A.e+(source.e/10)
                        source.e=source.e-(source.e/10)
                        A.m.append((source.l,source.k))
                elif A.l==source.l and source.k=="sparse":
                        A.e=A.e+(source.e)
                        source.e=source.e-source.e
                        A.m.append((source.l,source.k))
                        

#distance_energylost

def dis_ene_lost(A):
        if A.pl != 0:
                t=math.sqrt((A.l[0] - A.pl[0])**2 + (A.l[1] - A.pl[1])**2)
                A.e=A.e-(t*0.25)       

        
                
# Sources exhaust and regeneration
def source_exhaust():
        for instances in Sources.instances:
                if instances.e <=0:
                        Sources.instances.remove(instances)
                        W[instances.l]=0
                        board.delete(instances.c)
                 
def source_regen():
        # dense regenration
        if ti > 0 and ti % 50 == 0:
                for instances in Sources.instances:
                        if instances.k =="dense" and instances.e <= 20:
                                instances.e=50
                                #print("rengen_dense")
        #sparse regenration
        if ti > 0 and ti % 50 == 0:
                sp_source=[]
                for instances in Sources.instances:
                        if instances.k =="sparse" :
                                sp_source.append(instances)
                if len(sp_source) < ns:
                        x=np.random.poisson(ns-len(sp_source))
                        i=0
                        while i <=x:
                                m=random.choice(z)
                                if W[m]==0:
                                        Sources(str(instances.n)+str(i),m,20,"sparse")
                                        #print("born_sparse")
                                        W[m]=1
                                        i=i+1

                        
###################################################################

#board.pack(side=LEFT)

#root.mainloop()
                                        

expr=[]
expt=[]
ti=0
while ti<1000:
        ti=ti+1
        board.pack(side=LEFT)
        root.update_idletasks()
        #root.update()
        
        #()
        source_exhaust()
        source_regen()
        for instance in instances:
                instance.time=instance.time+1
                instance.a=instance.a+1
                instance.e=instance.e - 0.5
                        


        ##########(birth_agents)##############################
                i=len(instances)        
        #for instance in instances:
                if instance.e >= 40 and instance.a >=30:
                        nai=Agents(str(instance.n) + str(i),instance.l,instance.k,instance.s)
                        #print("nb",nai.l)
                        instance.e=instance.e - 30
                        instances.append(nai)
                        if nai.k == "expr":
                                W[nai.l]=((W[nai.l])*10)+3
                        elif nai.k == "expt":
                                W[nai.l]=((W[nai.l])*10)+4
                        i = i+1

        ############(death_agents)##############################

        #for instance in instances:
                if instance.e <= 0:
                        instances.remove(instance)
                        board.delete(instance.c)
                        #print("pre",W[instance.l])
                        W[instance.l]=(W[instance.l]//10)
                        #print("dead",W[instance.l])
                        if instance.k == "expr":
                                expr.append(instance.a)
                                #W[instance.l]=(W[instance.l]//10)
                        elif instance.k == "expt":
                                expt.append(instance.a)
                                #W[instance.l]=(W[instance.l]//10)
                                      
                                      
        ###########(movement_agents)############################
                        
                if ti > 0 and (ti % 30)==0 and instance.k == "expr" :
                        #board.pack(side=LEFT)
                        #print(W)
                        #root.mainloop()
                        #print("mepr",W)
                        ks=position_mov_sen(instance,10)
                        #print(ks)
                        kr=position_mov_ran(instance,10)
                        if len(ks)>0:
                                for f in ks:
                                        if sense_move(instance,f)==1:
                            #                    print("meprsss",W)
                                                mine_expr(instance)
                                                dis_ene_lost(instance)
                                                #mine=mine+1
                                                break
                        else :
                                for f in kr:
                                        if random_move(instance,f)==1:
                           #                     print("meprrrr",W)
                                                mine_expr(instance)
                                                dis_ene_lost(instance)
                                                break

                if ti > 0 and (ti % 10) == 0 and instance.k == "expt" :
                        #print("mept",W)
                        ks=position_mov_sen(instance,5)
                        kr=position_mov_ran(instance,5)
                        if len(ks)>0:
                                for k in ks:
                                        if sense_move(instance,k)==1:
                         #                       print("mepttss",W)
                                                mine_expt(instance)
                                                dis_ene_lost(instance)
                                                break
                        else :
                                for k in kr:
                                        if random_move(instance,k)==1:
                          #                      print("meptttt",W)
                                                mine_expt(instance)
                                                dis_ene_lost(instance)
                                                break
        root.update()
        time.sleep(0.05)
        root.update_idletasks()
        

        if len(instances)==0:
                WT=ti
                print("WT",WT)
                break



#item_grid[0][3] =
#board.create_rectangle(1*wid, 1*wid,2*wid,2*wid,fill="red",width=1)
#grid[0][1] = 1
#item_grid[1][1] = board.create_image(1*wid+35, 1*wid+35, image=fire_pic)
#grid[1][1] = 1


r=mean(expr)
#print(expr)
s=mean(expt)
#print(expt)

print("av_expr",r,stdev(expr))
print("av_expt",s,stdev(expt))

print(W)

board.pack(side=LEFT)
#root.update()

#root.mainloop()






















