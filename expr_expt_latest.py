

import numpy as np
import matplotlib.pyplot as plt
import random
import time
import math
from statistics import mean,stdev
#import weakref

#create world

#w=int(input("width of world :"))
#w=10
#h=int(input("length of world :"))
#h=10
W = np.zeros((w,h))
        

#count: sparse = 2 & dense = 1 & agents explr=1 & explt=1
#type: 0 = unoccupied, 1 = sparse source, & 2 = dense source, 3 = explorer agent
#      4 = exploiter agent

t=[i for i in np.ndindex(4,4)]
z=[i for i in np.ndindex(w,h) ]#if i not in t]


#arrange world

#ns=int(input("no. of sparses: "))
#ns=10
j=0
while j <ns:
        m=random.choice(z)
        if W[m]==0:
                W[m[0]][m[1]] = 1
                j = j+1
                
#nd=int(input("no. of denses: "))
#nd=4
j=0
while j <nd:
        m=random.choice(z)
        if W[m]==0:
                W[m[0]][m[1]] = 2
                j = j+1
                
#aer=int(input("no. of explorer: "))
#aer=2
j=0
while j <aer:
        m=random.choice(t)
        t.remove(m)
        W[m[0]][m[1]] = 3
        j = j+1
        
#aet=int(input("no. of exploiter: "))
#aet=2
j=0
while j <aet:
        m=random.choice(t)
        t.remove(m)
        W[m[0]][m[1]] = 4
        j = j+1      

#####################################################


class Sources:
        instances=[]
        def __init__(self,name,location,EU, kind):
                self.__class__.instances.append(self)
                self.name = name
                self.l = location
                self.e = EU
                self.k = kind

		
esl=np.where(W==1)
es=0
for es in range(0,ns):
        Sources("es"+str(es),(esl[0][0],esl[1][0]),20,"sparse")

edl=np.where(W==2)
ed=0
for ed in range(0, nd):
        Sources("ed"+str(ed),(edl[0][0],edl[1][0]),50,"dense")


###########################################################
instances=[]
class Agents:

        def __init__(self, location,kind,society):
                self.l = location
                self.e = 50 #EU
                self.k = kind
                self.a = 0 #age
                self.m = [] #memory
                self.s = society
                self.time = 0 #ticks
                self.srno=id(self)
                self.pl= 0
                self.td=0


aexpr_l=np.where(W==3)
aexr=0
for aexr in range(0,aer):
        aexpr_aexr=Agents((aexpr_l[0][0],aexpr_l[1][0]),"expr",1)
        instances.append(aexpr_aexr)
     
aexpt_l=np.where(W==4)
aext=0
for aext in range(0, aet):
        aexpt_aext=Agents((aexpt_l[0][0],aexpt_l[1][0]),"expt",1)
        instances.append(aexpt_aext)


#################################################################

#######FUNCTIONS############

#locations to move random

def position_mov_sen(n,d):
        p=[]
        for i in z:
                t=math.sqrt((i[0] - n.l[0])**2 + (i[1] - n.l[1])**2)
                if t<=d and (int(str(int(W[i]))) ==1 or int(str(int(W[i]))) ==2):
                        p.append(i)
        return p

def position_mov_ran(n,d):
        p=[]
        for i in z:
                t=math.sqrt((i[0] - n.l[0])**2 + (i[1] - n.l[1])**2)
                if t==d: 
                        p.append(i)
        return p


def random_move(A,nl):
        j=0
        if W[nl]==0:
                if A.l !=0:
                        t=math.sqrt((nl[0] - A.l[0])**2 + (nl[1] - A.l[1])**2)
                        A.td=A.td+t
                A.pl=A.l
                pv=W[A.l]
                W[A.l]=pv//10
                A.l=nl
                W[A.l]=(W[nl]*10)+pv%10
                j=1
                return j

# sensing move

def sense_move(A,nl):
        m=0
        v=str(int(W[nl]))
        if A.l !=0:
                t=math.sqrt((nl[0] - A.l[0])**2 + (nl[1] - A.l[1])**2)
                A.td=A.td+t
        A.pl=A.l
        pv=W[A.l]
        W[A.l]=pv//10
        A.l=nl
        W[A.l]=(W[nl]*10)+pv%10
        m=1        
        return m

#mine energy

def mine_expr(A):
        for source in Sources.instances:
                if A.l == source.l and source.k=="dense":
                        #mine=mine+1
                        A.e=A.e+(source.e/20)
                        source.e=source.e-(source.e/20)
                        A.m.append((source.l,source.k))
                elif A.l==source.l and source.k=="sparse":
                        #mine=mine+1
                        A.e=A.e+(source.e/4)
                        source.e=source.e-(source.e/4)
                        A.m.append((source.l,source.k))

def mine_expt(A):
        for source in Sources.instances:
                if A.l == source.l and source.k=="dense":
                        A.e=A.e+(source.e/10)
                        source.e=source.e-(source.e/10)
                        A.m.append((source.l,source.k))
                elif A.l==source.l and source.k=="sparse":
                        A.e=A.e+(source.e)
                        source.e=source.e-source.e
                        A.m.append((source.l,source.k))
                        

#distance_energylost

def dis_ene_lost(A):
        if A.pl != 0:
                t=math.sqrt((A.l[0] - A.pl[0])**2 + (A.l[1] - A.pl[1])**2)
                A.e=A.e-(t*0.25)       

        
                
# Sources exhaust and regeneration
def source_exhaust():
        for instances in Sources.instances:
                if instances.e <=0:
                        Sources.instances.remove(instances)
                        W[instances.l]=0
                 
def source_regen():
        # dense regenration
        if ti > 0 and ti % 50 == 0:
                for instances in Sources.instances:
                        if instances.k =="dense" and instances.e <= 20:
                                instances.e=50
        #sparse regenration
        if ti > 0 and ti % 50 == 0:
                sp_source=[]
                for instances in Sources.instances:
                        if instances.k =="sparse" :
                                sp_source.append(instances)
                if ns < len(sp_source):
                        x=np.random.poisson(ns-len(sp_source))
                        m=z.pop()
                        if W[m]==0:
                                i=0
                                while i <=x:
                                        Sources("es1",m,20,"sparse")
                                        W[m]=1
                                        i=i+1

                        
###################################################################
expr_td=[]
expt_td=[]
expr=[]
expt=[]
ti=0
while ti<1000:
        ti=ti+1
        source_exhaust()
        source_regen()
        for instance in instances:
                instance.time=instance.time+1
                instance.a=instance.a+1
                instance.e=instance.e - 0.5
                        


        ##########(birth_agents)##############################
                i=len(instances)        
        #for instance in instances:
                if instance.e >= 40 and instance.a >=30:
                        nai=Agents(instance.l,instance.k,instance.s)
                        instance.e=instance.e - 30
                        instances.append(nai)
                        if nai.k == "expr":
                                W[nai.l]=((W[nai.l])*10)+3
                        elif nai.k == "expt":
                                W[nai.l]=((W[nai.l])*10)+4
                        i = i+1

        ############(death_agents)##############################

        #for instance in instances:
                if instance.e <= 0:
                        instances.remove(instance)
                        if instance.k == "expr":
                                expr.append(instance.a)
                                expr_td.append(instance.td)
                                W[instance.l]=(W[instance.l]//10)
                        elif instance.k == "expt":
                                expt.append(instance.a)
                                expt_td.append(instance.td)
                                W[instance.l]=(W[instance.l]//10)
                                      
                                      
        ###########(movement_agents)############################
                        
                if ti > 0 and (ti % 30)==0 and instance.k == "expr" :
                        #print("mepr",W)
                        ks=position_mov_sen(instance,10)
                        kr=position_mov_ran(instance,10)
                        if len(ks)>0:
                                for f in ks:
                                        if sense_move(instance,f)==1:
                                                mine_expr(instance)
                                                dis_ene_lost(instance)
                                                #mine=mine+1
                                                break
                        else :
                                for f in kr:
                                        if random_move(instance,f)==1:
                                                mine_expr(instance)
                                                dis_ene_lost(instance)
                                                break

                if ti > 0 and (ti % 10) == 0 and instance.k == "expt" :
                        ks=position_mov_sen(instance,5)
                        kr=position_mov_ran(instance,5)
                        if len(ks)>0:
                                for k in ks:
                                        if sense_move(instance,k)==1:
                                                mine_expt(instance)
                                                dis_ene_lost(instance)
                                                break
                        else :
                                for k in kr:
                                        if random_move(instance,k)==1:
                                                mine_expt(instance)
                                                dis_ene_lost(instance)
                                                break
                                

        if len(instances)==0:
                WT=ti
                #print("WT",WT)
                break

#r=mean(expr)
#print(expr)
#s=mean(expt)
tdexpr=mean(expr_td)
tdexpt=mean(expt_td)
#print(expt)
#print("tdexpr",expr_td,mean(expr_td))
#print("tdexpt",expt_td,mean(expt_td))

#print("av_expr",r,stdev(expr))
#print("av_expt",s,stdev(expt))





















